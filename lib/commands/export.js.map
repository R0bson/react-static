{"version":3,"sources":["../../src/commands/export.js"],"names":["config","staging","debug","isBuild","process","env","NODE_ENV","REACT_STATIC_ENV","BABEL_ENV","REACT_STATIC_STAGING","REACT_STATIC_DEBUG","fs","readJson","paths","DIST","bundledEnv","Object","keys","forEach","key","opts","dev","routes","console","log","chalk","green","clientStats","Error","PrettyError","require","render","exit","onBuild"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;;AAHA;;;;wEAKe;AAAA,oFAEX,EAFW;AAAA,QACbA,MADa,SACbA,MADa;AAAA,QACLC,OADK,SACLA,OADK;AAAA,QACIC,KADJ,SACIA,KADJ;AAAA,QACWC,OADX,SACWA,OADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGb;AACA,gBAAI,OAAOC,QAAQC,GAAR,CAAYC,QAAnB,KAAgC,WAAhC,IAA+C,CAACJ,KAApD,EAA2D;AACzDE,sBAAQC,GAAR,CAAYC,QAAZ,GAAuB,YAAvB;AACD;;AAEDF,oBAAQC,GAAR,CAAYE,gBAAZ,GAA+B,YAA/B;AACAH,oBAAQC,GAAR,CAAYG,SAAZ,GAAwB,YAAxB;;AAEA,gBAAIP,OAAJ,EAAa;AACXG,sBAAQC,GAAR,CAAYI,oBAAZ,GAAmC,IAAnC;AACD;;AAED,gBAAIP,KAAJ,EAAW;AACTE,sBAAQC,GAAR,CAAYK,kBAAZ,GAAiC,IAAjC;AACD;;AAED;;AAnBa,gBAoBRP,OApBQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBI,yBAAUH,MAAV,CArBJ;;AAAA;AAqBXA,kBArBW;;AAAA;AAAA,gBAwBRG,OAxBQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0BcQ,kBAAGC,QAAH,CAAeZ,OAAOa,KAAP,CAAaC,IAA5B,8BA1Bd;;AAAA;AA0BLC,sBA1BK;;AA2BXC,mBAAOC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,eAAO;AACrC,kBAAI,OAAOd,QAAQC,GAAR,CAAYc,GAAZ,CAAP,KAA4B,WAAhC,EAA6C;AAC3Cf,wBAAQC,GAAR,CAAYc,GAAZ,IAAmBJ,WAAWI,GAAX,CAAnB;AACD;AACF,aAJD;;AA3BW;AAAA;AAAA,mBAkCE,2BAAc,EAAEnB,cAAF,EAAUoB,MAAM,EAAEC,KAAK,KAAP,EAAhB,EAAd,CAlCF;;AAAA;AAkCbrB,kBAlCa;;AAAA,gBAoCRA,OAAOsB,MApCC;AAAA;AAAA;AAAA;;AAqCXC,oBAAQC,GAAR,CAAY,uBAAZ;AACA,6BAAKC,gBAAMC,KAAN,CAAY,0BAAZ,CAAL;AAtCW;AAAA,mBAuCL,2BAAc1B,MAAd,EAAsB,EAAEqB,KAAK,KAAP,EAAtB,CAvCK;;AAAA;AAwCX,gCAAQI,gBAAMC,KAAN,CAAY,0BAAZ,CAAR;;AAxCW;;AA2Cb,gBAAIxB,KAAJ,EAAW;AACTqB,sBAAQC,GAAR,CAAY,oCAAZ;AACAD,sBAAQC,GAAR,CAAYxB,MAAZ;AACD;;AA9CY;AAAA,mBAgDaW,kBAAGC,QAAH,CAAeZ,OAAOa,KAAP,CAAaC,IAA5B,wBAhDb;;AAAA;AAgDPa,uBAhDO;;AAAA,gBAkDRA,WAlDQ;AAAA;AAAA;AAAA;;AAAA,kBAmDL,IAAIC,KAAJ,CAAU,uBAAV,CAnDK;;AAAA;AAAA;AAAA;AAAA,mBAuDL,0BAAa;AACjB5B,4BADiB;AAEjB2B;AAFiB,aAAb,CAvDK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DLE,uBA5DK,GA4DSC,QAAQ,cAAR,CA5DT;;AA6DXP,oBAAQC,GAAR,GA7DW,CA6DG;AACdD,oBAAQC,GAAR,CAAY,IAAIK,WAAJ,GAAkBE,MAAlB,aAAZ;AACA3B,oBAAQ4B,IAAR,CAAa,CAAb;;AA/DW;AAAA;AAAA,mBAkEP,4BAAe,EAAEhC,cAAF,EAAf,CAlEO;;AAAA;AAAA,iBAoETA,OAAOiC,OApEE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqELjC,OAAOiC,OAAP,CAAe,EAAEjC,cAAF,EAAf,CArEK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"export.js","sourcesContent":["import fs from 'fs-extra'\nimport chalk from 'chalk'\n//\nimport { exportRoutes, buildXMLandRSS, prepareRoutes } from '../static'\nimport getConfig from '../static/getConfig'\nimport { timeEnd, time } from '../utils'\n\nexport default async ({\n  config, staging, debug, isBuild,\n} = {}) => {\n  // ensure ENV variables are set\n  if (typeof process.env.NODE_ENV === 'undefined' && !debug) {\n    process.env.NODE_ENV = 'production'\n  }\n\n  process.env.REACT_STATIC_ENV = 'production'\n  process.env.BABEL_ENV = 'production'\n\n  if (staging) {\n    process.env.REACT_STATIC_STAGING = true\n  }\n\n  if (debug) {\n    process.env.REACT_STATIC_DEBUG = true\n  }\n\n  // Allow config location to be overriden\n  if (!isBuild) {\n    config = await getConfig(config)\n  }\n\n  if (!isBuild) {\n    // Restore the process environment variables that were present during the build\n    const bundledEnv = await fs.readJson(`${config.paths.DIST}/bundle-environment.json`)\n    Object.keys(bundledEnv).forEach(key => {\n      if (typeof process.env[key] === 'undefined') {\n        process.env[key] = bundledEnv[key]\n      }\n    })\n  }\n\n  config = await prepareRoutes({ config, opts: { dev: false } })\n\n  if (!config.routes) {\n    console.log('=> Building Routes...')\n    time(chalk.green('=> [\\u2713] Routes Built'))\n    await prepareRoutes(config, { dev: false })\n    timeEnd(chalk.green('=> [\\u2713] Routes Built'))\n  }\n\n  if (debug) {\n    console.log('DEBUG - Resolved static.config.js:')\n    console.log(config)\n  }\n\n  const clientStats = await fs.readJson(`${config.paths.DIST}/client-stats.json`)\n\n  if (!clientStats) {\n    throw new Error('No Client Stats Found')\n  }\n\n  try {\n    await exportRoutes({\n      config,\n      clientStats,\n    })\n  } catch (e) {\n    const PrettyError = require('pretty-error')\n    console.log() // new line\n    console.log(new PrettyError().render(e))\n    process.exit(1)\n  }\n\n  await buildXMLandRSS({ config })\n\n  if (config.onBuild) {\n    await config.onBuild({ config })\n  }\n}\n"]}