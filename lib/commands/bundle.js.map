{"version":3,"sources":["../../src/commands/bundle.js"],"names":["config","staging","debug","process","env","NODE_ENV","REACT_STATIC_ENV","BABEL_ENV","REACT_STATIC_STAGING","REACT_STATIC_DEBUG","console","log","siteRoot","fs","remove","paths","DIST","opts","dev","chalk","green","bundleAnalyzer","Promise","build"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;AACA;;;;AACA;;;;;AAJA;;;;wEAMe;AAAA,oFAAmD,EAAnD;AAAA,QAAwBA,MAAxB,SAAwBA,MAAxB;AAAA,QAAgCC,OAAhC,SAAgCA,OAAhC;AAAA,QAAyCC,KAAzC,SAAyCA,KAAzC;;AAAA;AAAA;AAAA;AAAA;AACb;AACA,gBAAI,OAAOC,QAAQC,GAAR,CAAYC,QAAnB,KAAgC,WAAhC,IAA+C,CAACH,KAApD,EAA2D;AACzDC,sBAAQC,GAAR,CAAYC,QAAZ,GAAuB,YAAvB;AACD;AACDF,oBAAQC,GAAR,CAAYE,gBAAZ,GAA+B,YAA/B;AACAH,oBAAQC,GAAR,CAAYG,SAAZ,GAAwB,YAAxB;;AAEA,gBAAIN,OAAJ,EAAa;AACXE,sBAAQC,GAAR,CAAYI,oBAAZ,GAAmC,IAAnC;AACD;AACD,gBAAIN,KAAJ,EAAW;AACTC,sBAAQC,GAAR,CAAYK,kBAAZ,GAAiC,IAAjC;AACD;;AAED;AAfa;AAAA,mBAgBE,yBAAUT,MAAV,CAhBF;;AAAA;AAgBbA,kBAhBa;;;AAkBb,gBAAIE,KAAJ,EAAW;AACTQ,sBAAQC,GAAR,CAAY,oCAAZ;AACAD,sBAAQC,GAAR,CAAYX,MAAZ;AACD;AACDU,oBAAQC,GAAR,CAAY,EAAZ;;AAEA,gBAAI,CAACX,OAAOY,QAAZ,EAAsB;AACpBF,sBAAQC,GAAR,CACE,gJADF;AAGAD,sBAAQC,GAAR,CAAY,EAAZ;AACD;;AAED;AA/Ba;AAAA,mBAgCPE,kBAAGC,MAAH,CAAUd,OAAOe,KAAP,CAAaC,IAAvB,CAhCO;;AAAA;AAAA;AAAA,mBAkCE,2BAAc,EAAEhB,cAAF,EAAUiB,MAAM,EAAEC,KAAK,KAAP,EAAhB,EAAd,CAlCF;;AAAA;AAkCblB,kBAlCa;;;AAoCbU,oBAAQC,GAAR,CAAY,gCAAZ;AACA,6BAAKQ,gBAAMC,KAAN,CAAY,qCAAZ,CAAL;AACA,yCAAiBpB,MAAjB;AACA,gCAAQmB,gBAAMC,KAAN,CAAY,qCAAZ,CAAR;;AAEA;AACAV,oBAAQC,GAAR,CAAY,oBAAZ;AACA,6BAAKQ,gBAAMC,KAAN,CAAY,yBAAZ,CAAL;AA3Ca;AAAA,mBA4CP,qCAAuB,EAAEpB,cAAF,EAAvB,CA5CO;;AAAA;AA6Cb,gCAAQmB,gBAAMC,KAAN,CAAY,yBAAZ,CAAR;;AA7Ca,iBA+CTpB,OAAOqB,cA/CE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgDL,IAAIC,OAAJ,CAAY,YAAM,CAAE,CAApB,CAhDK;;AAAA;AAAA,6CAmDNtB,MAnDM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeuB,K;;;;SAAAA,K","file":"bundle.js","sourcesContent":["import fs from 'fs-extra'\nimport chalk from 'chalk'\n//\nimport { prepareRoutes } from '../static'\nimport { buildProductionBundles } from '../static/webpack'\nimport getConfig from '../static/getConfig'\nimport { copyPublicFolder, time, timeEnd } from '../utils'\n\nexport default async function build ({ config, staging, debug } = {}) {\n  // ensure ENV variables are set\n  if (typeof process.env.NODE_ENV === 'undefined' && !debug) {\n    process.env.NODE_ENV = 'production'\n  }\n  process.env.REACT_STATIC_ENV = 'production'\n  process.env.BABEL_ENV = 'production'\n\n  if (staging) {\n    process.env.REACT_STATIC_STAGING = true\n  }\n  if (debug) {\n    process.env.REACT_STATIC_DEBUG = true\n  }\n\n  // Allow config location to be overriden\n  config = await getConfig(config)\n\n  if (debug) {\n    console.log('DEBUG - Resolved static.config.js:')\n    console.log(config)\n  }\n  console.log('')\n\n  if (!config.siteRoot) {\n    console.log(\n      \"=> Info: No 'siteRoot' is defined in 'static.config.js'. This is suggested for absolute url's and a sitemap.xml to be automatically generated.\"\n    )\n    console.log('')\n  }\n\n  // Remove the DIST folder\n  await fs.remove(config.paths.DIST)\n\n  config = await prepareRoutes({ config, opts: { dev: false } })\n\n  console.log('=> Copying public directory...')\n  time(chalk.green('=> [\\u2713] Public directory copied'))\n  copyPublicFolder(config)\n  timeEnd(chalk.green('=> [\\u2713] Public directory copied'))\n\n  // Build static pages and JSON\n  console.log('=> Bundling App...')\n  time(chalk.green('=> [\\u2713] App Bundled'))\n  await buildProductionBundles({ config })\n  timeEnd(chalk.green('=> [\\u2713] App Bundled'))\n\n  if (config.bundleAnalyzer) {\n    await new Promise(() => {})\n  }\n\n  return config\n}\n"]}