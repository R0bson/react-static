{"version":3,"sources":["../../src/commands/create.js"],"names":["inquirer","registerPrompt","autoCompletePrompt","template","dest","console","log","startsWith","chalk","green","red","getGitHubRepo","downloadGitRepo","exampleList","includes","fs","copy","path","resolve","__dirname","fetchTemplate","name","isCLI","prompts","readdir","files","filter","d","exampleChoices","push","type","message","default","source","answersSoFar","input","shouldPrompt","prompt","answers","Error","process","cwd","githubRepoName","pathExistsSync","join","move","removeSync","isYarn","shouldUseYarn","hex","ChalkColor","yarn","npm","create","stdio","e"],"mappings":"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","file":"create.js","sourcesContent":["import fs from 'fs-extra'\nimport chalk from 'chalk'\nimport path from 'path'\nimport git from 'git-promise'\nimport { execSync } from 'child_process'\nimport inquirer from 'inquirer'\nimport autoCompletePrompt from 'inquirer-autocomplete-prompt'\nimport matchSorter from 'match-sorter'\nimport downloadGitRepo from 'download-git-repo'\nimport { promisify } from 'util'\nimport { ChalkColor, time, timeEnd } from '../utils'\n\ninquirer.registerPrompt('autocomplete', autoCompletePrompt)\n\nexport default async function create ({ name, template, isCLI } = {}) {\n  const prompts = []\n\n  const files = await fs.readdir(path.resolve(__dirname, '../../examples/'))\n\n  console.log('')\n\n  let exampleList = files.filter(d => !d.startsWith('.'))\n  exampleList = ['basic', ...exampleList.filter(d => d !== 'basic')]\n  const exampleChoices = [...exampleList, 'custom']\n\n  // prompt if --name argument is not passed from CLI\n  // warning: since name will be set as a function by commander by default\n  //   unless it's assigned as an argument from the CLI, we can't simply just\n  //   check for it's existence. if it's not been set by the CLI, we properly\n  //   set it to null for later conditional checks.\n  if (typeof name !== 'string') {\n    name = null\n    prompts.push({\n      type: 'input',\n      name: 'name',\n      message: 'What should we name this project?',\n      default: 'my-static-site',\n    })\n  }\n\n  // prompt if --template argument is not passed from CLI\n  if (!template) {\n    prompts.push({\n      type: 'autocomplete',\n      name: 'template',\n      message: 'Select a template below...',\n      source: async (answersSoFar, input) =>\n        !input ? exampleChoices : matchSorter(exampleChoices, input),\n    })\n  }\n\n  const shouldPrompt = isCLI && (!name || !template)\n  const answers = shouldPrompt ? await inquirer.prompt(prompts) : {}\n\n  if (answers.name) {\n    name = answers.name\n  }\n  if (answers.template) {\n    template = answers.template\n  }\n\n  if (!name) {\n    throw new Error('A project name is required. Please use options.name to define one.')\n  }\n\n  if (!template) {\n    throw new Error('A project template is required. Please use options.template to define one.')\n  }\n\n  time(chalk.green(`=> [\\u2713] Project \"${name}\" created`))\n  console.log('=> Creating new react-static project...')\n  const dest = path.resolve(process.cwd(), name)\n\n  if (template === 'custom') {\n    const { githubRepoName } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'githubRepoName',\n        message:\n          'Specify the full address of a public git repo from GitHub, BitBucket, GitLab, etc. (https://github.com/ownerName/repoName.git)',\n        default: 'basic',\n      },\n    ])\n    template = githubRepoName\n  }\n\n  // Fetch template\n  await fetchTemplate(template, dest)\n\n  // Since npm packaging will clobber .gitignore files\n  // We need to rename the gitignore file to .gitignore\n  // See: https://github.com/npm/npm/issues/1862\n\n  if (!fs.pathExistsSync(path.join(dest, '.gitignore'))) {\n    await fs.move(path.join(dest, 'gitignore'), path.join(dest, '.gitignore'))\n  }\n  if (fs.pathExistsSync(path.join(dest, 'gitignore'))) {\n    fs.removeSync(path.join(dest, 'gitignore'))\n  }\n\n  const isYarn = shouldUseYarn()\n\n  if (isCLI) {\n    console.log(\n      `=> Installing dependencies with: ${\n        isYarn ? chalk.hex(ChalkColor.yarn)('Yarn') : chalk.hex(ChalkColor.npm)('NPM')\n      }...`\n    )\n    // We install react-static separately to ensure we always have the latest stable release\n    execSync(\n      `cd ${name} && ${isYarn ? 'yarn' : 'npm install'} && ${\n        isYarn ? 'yarn add react-static@latest' : 'npm install react-static@latest --save'\n      }`\n    )\n    console.log('')\n  }\n\n  timeEnd(chalk.green(`=> [\\u2713] Project \"${name}\" created`))\n\n  console.log(`\n  ${chalk.green('=> To get started:')}\n\n    cd ${name} ${\n  !isCLI\n    ? `&& ${\n      isYarn ? chalk.hex(ChalkColor.yarn)('yarn') : chalk.hex(ChalkColor.npm)('npm install')\n    }`\n    : ''\n}\n\n    ${\n  isYarn ? chalk.hex(ChalkColor.yarn)('yarn') : chalk.hex(ChalkColor.npm)('npm run')\n} start ${chalk.green('- Start the development server')}\n    ${\n  isYarn ? chalk.hex(ChalkColor.yarn)('yarn') : chalk.hex(ChalkColor.npm)('npm run')\n} build ${chalk.green('- Build for production')}\n    ${\n  isYarn ? chalk.hex(ChalkColor.yarn)('yarn') : chalk.hex(ChalkColor.npm)('npm run')\n} serve ${chalk.green('- Test a production build locally')}\n  `)\n\n  async function fetchTemplate (template, dest) {\n    console.log('')\n    if (template.startsWith('https://') || template.startsWith('git@')) {\n      try {\n        console.log(chalk.green(`Downloading template: ${template}`))\n        await git(`clone --recursive ${template} ${dest}`)\n      } catch (err) {\n        console.log(chalk.red(`Download of ${template} failed`))\n        throw err\n      }\n    } else if (template.startsWith('http://')) {\n      // use download-git-repo to fetch remote repository\n      const getGitHubRepo = promisify(downloadGitRepo)\n      try {\n        console.log(chalk.green(`Downloading template: ${template}`))\n        await getGitHubRepo(template, dest)\n      } catch (err) {\n        console.log(chalk.red(`Download of ${template} failed`))\n        throw err\n      }\n    } else {\n      // If it's an exapmle template, copy it from there\n      if (exampleList.includes(template)) {\n        try {\n          console.log(chalk.green(`Using template: ${template}`))\n          return fs.copy(path.resolve(__dirname, `../../examples/${template}`), dest)\n        } catch (err) {\n          console.log(chalk.red(`Copying the template: ${template} failed`))\n          throw err\n        }\n      }\n      // template must be local, copy directly\n      try {\n        console.log(chalk.green(`Using template from directory: ${template}`))\n        await fs.copy(path.resolve(__dirname, template), dest)\n      } catch (err) {\n        console.log(chalk.red(`Copying the template from directory: ${template} failed`))\n        throw err\n      }\n    }\n  }\n}\n\nfunction shouldUseYarn () {\n  try {\n    execSync('yarnpkg --version', { stdio: 'ignore' })\n    return true\n  } catch (e) {\n    return false\n  }\n}\n"]}