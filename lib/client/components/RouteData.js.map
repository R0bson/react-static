{"version":3,"sources":["../../../src/client/components/RouteData.js"],"names":["withRouteData","warnedPaths","instances","global","reloadAll","forEach","instance","reloadRouteData","RouteData","state","loaded","loadRouteData","forceUpdate","props","is404","pathname","location","path","Promise","setState","resolve","process","env","REACT_STATIC_ENV","push","nextProps","filter","d","unmounting","component","render","children","rest","allProps","window","__routeInfo","context","routeInfo","routeInfoByPath","console","warn","finalProps","React","createElement","Component","contextTypes","PropTypes","object","Comp","ConnectedRouteData"],"mappings":"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","file":"RouteData.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withRouter } from 'react-router-dom'\n\nimport { prefetch, routeInfoByPath } from '../methods'\nimport { cleanPath } from '../../utils/shared'\nimport DevSpinner from './DevSpinner'\n\nconst warnedPaths = {}\nlet instances = []\n\nglobal.reloadAll = () => {\n  instances.forEach(instance => instance.reloadRouteData())\n}\n\nconst RouteData = withRouter(\n  class RouteData extends React.Component {\n    static contextTypes = {\n      routeInfo: PropTypes.object,\n    }\n    state = {\n      loaded: false,\n    }\n    componentWillMount () {\n      if (process.env.REACT_STATIC_ENV === 'development') {\n        this.loadRouteData()\n      }\n    }\n    componentDidMount () {\n      instances.push(this)\n    }\n    componentWillReceiveProps (nextProps) {\n      if (process.env.REACT_STATIC_ENV === 'development') {\n        if (this.props.location.pathname !== nextProps.location.pathname) {\n          this.setState({ loaded: false }, this.loadRouteData)\n        }\n      }\n    }\n    componentWillUnmount () {\n      instances = instances.filter(d => d !== this)\n      this.unmounting = true\n    }\n    reloadRouteData = () =>\n      (async () => {\n        await this.loadRouteData()\n        this.forceUpdate()\n      })()\n    loadRouteData = () =>\n      (async () => {\n        const { is404, location: { pathname } } = this.props\n        const path = cleanPath(is404 ? '404' : pathname)\n        try {\n          await prefetch(path)\n          return new Promise(resolve => {\n            this.setState({ loaded: true }, resolve)\n          })\n        } catch (err) {\n          return new Promise(resolve => {\n            this.setState({ loaded: true }, resolve)\n          })\n        }\n      })()\n    render () {\n      const {\n        component, render, children, location: { pathname }, ...rest\n      } = this.props\n      let { loaded } = this.state\n\n      const path = cleanPath(rest.is404 ? '404' : pathname)\n\n      let allProps\n\n      // Attempt to get routeInfo from window (first-load on client)\n      if (typeof window !== 'undefined' && window.__routeInfo && (window.__routeInfo.path === path || window.__routeInfo.path === '404')) {\n        loaded = true // Since these are synchronous, override loading to true\n        allProps = window.__routeInfo.allProps\n      }\n\n      // Attempt to get routeInfo from context (SSR)\n      if (!allProps && this.context.routeInfo && this.context.routeInfo.allProps) {\n        loaded = true // Override loaded to true\n        allProps = this.context.routeInfo && this.context.routeInfo.allProps\n      } else if (routeInfoByPath[path]) {\n        // Otherwise, get it from the routeInfoByPath (subsequent client side)\n        loaded = true // Override loaded to true\n        allProps = routeInfoByPath[path].allProps\n      }\n\n      if (!allProps && !rest.is404 && !warnedPaths[path]) {\n        warnedPaths[path] = true\n        console.warn(\n          `RouteData or withRouteData couldn't find any props for path: ${path}. You are either missing a route.getData function or you are relying on RouteData/withRouteData where you don't need to.`\n        )\n      }\n\n      if (!loaded) {\n        if (process.env.REACT_STATIC_ENV === 'development') {\n          return <DevSpinner />\n        }\n        return null\n      }\n\n      const finalProps = {\n        ...rest,\n        ...allProps,\n      }\n      if (component) {\n        return React.createElement(component, finalProps, children)\n      }\n      if (render) {\n        return render(finalProps)\n      }\n      return children(finalProps)\n    }\n  }\n)\n\nexport default RouteData\n\nexport function withRouteData (Comp) {\n  return function ConnectedRouteData (props) {\n    return <RouteData component={Comp} {...props} />\n  }\n}\n"]}