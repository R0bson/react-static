{"version":3,"sources":["../../src/static/generateRoutes.js"],"names":["config","templates","routes","route404","find","route","path","id404","templateID","productionImports","developmentImports","productionTemplates","map","template","index","templatePath","relative","paths","DIST","resolve","ROOT","join","developmentTemplates","file","process","env","NODE_ENV","dynamicRoutesPath","fs","remove","outputFile"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;wEAEe;AAAA,QAASA,MAAT,SAASA,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,qBADK,GACiBD,MADjB,CACLC,SADK,EACMC,MADN,GACiBF,MADjB,CACME,MADN;AAGPC,oBAHO,GAGID,OAAOE,IAAP,CAAY;AAAA,qBAASC,MAAMC,IAAN,KAAe,KAAxB;AAAA,aAAZ,CAHJ;AAIPC,iBAJO,GAICJ,SAASK,UAJV;AAMPC,6BANO;AASPC,8BATO,GASc,EATd;AAWPC,+BAXO,6QAsBbV,UACGW,GADH,CACO,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACxB,kBAAMC,eAAeT,eAAKU,QAAL,CACnBhB,OAAOiB,KAAP,CAAaC,IADM,EAEnBZ,eAAKa,OAAL,CAAanB,OAAOiB,KAAP,CAAaG,IAA1B,EAAgCP,QAAhC,CAFmB,CAArB;AAIA,kCAAkBC,KAAlB,8BAA+C,qBAAMC,YAAN,CAA/C;AACD,aAPH,EAQGM,IARH,CAQQ,IARR,CAtBa;AAiCPC,gCAjCO,GAiCgBrB,UAC1BW,GAD0B,CACtB,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACxB,kBAAMC,eAAeT,eAAKU,QAAL,CACnBhB,OAAOiB,KAAP,CAAaC,IADM,EAEnBZ,eAAKa,OAAL,CAAanB,OAAOiB,KAAP,CAAaG,IAA1B,EAAgCP,QAAhC,CAFmB,CAArB;AAIA,mCAAmBC,KAAnB,gBAAkC,qBAAMC,YAAN,CAAlC;AACD,aAP0B,EAQ1BM,IAR0B,CAQrB,IARqB,CAjChB;AA2CPE,gBA3CO,+IA+CbC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,iBAAxC,GAA4DC,kBA/C/C,cAiDbc,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCf,mBAAxC,GAA8DW,oBAjDjD,oGAqDXrB,UAAUW,GAAV,CAAc,UAACC,QAAD,EAAWC,KAAX;AAAA,4BAA0BA,KAA1B;AAAA,aAAd,EAAiDO,IAAjD,CAAsD,KAAtD,CArDW,wDAyDJd,KAzDI;AAqIPoB,6BArIO,GAqIarB,eAAKe,IAAL,CAAUrB,OAAOiB,KAAP,CAAaC,IAAvB,EAA6B,wBAA7B,CArIb;AAAA;AAAA,mBAsIPU,kBAAGC,MAAH,CAAUF,iBAAV,CAtIO;;AAAA;AAAA;AAAA,mBAuIPC,kBAAGE,UAAH,CAAcH,iBAAd,EAAiCJ,IAAjC,CAvIO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"generateRoutes.js","sourcesContent":["import path from 'path'\nimport slash from 'slash'\nimport fs from 'fs-extra'\n\nexport default async ({ config }) => {\n  const { templates, routes } = config\n\n  const route404 = routes.find(route => route.path === '404')\n  const id404 = route404.templateID\n\n  const productionImports = `\nimport universal, { setHasBabelPlugin } from 'react-universal-component'\n  `\n  const developmentImports = ''\n\n  const productionTemplates = `\nsetHasBabelPlugin()\n\nconst universalOptions = {\n  loading: () => null,\n  error: props => {\n    console.error(props.error);\n    return <div>An error occurred loading this page's template. More information is available in the console.</div>;\n  },\n}\n\n${templates\n    .map((template, index) => {\n      const templatePath = path.relative(\n        config.paths.DIST,\n        path.resolve(config.paths.ROOT, template)\n      )\n      return `const t_${index} = universal(import('${slash(templatePath)}'), universalOptions)`\n    })\n    .join('\\n')}\n`\n\n  const developmentTemplates = templates\n    .map((template, index) => {\n      const templatePath = path.relative(\n        config.paths.DIST,\n        path.resolve(config.paths.ROOT, template)\n      )\n      return `import t_${index} from '${slash(templatePath)}'`\n    })\n    .join('\\n')\n\n  const file = `\nimport React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport { cleanPath } from 'react-static'\n${process.env.NODE_ENV === 'production' ? productionImports : developmentImports}\n\n${process.env.NODE_ENV === 'production' ? productionTemplates : developmentTemplates}\n\n// Template Map\nglobal.componentsByTemplateID = global.componentsByTemplateID || [\n  ${templates.map((template, index) => `t_${index}`).join(',\\n')}\n]\n\nconst defaultTemplateIDs = {\n  '404': ${id404}\n}\n\n// Template Tree\nglobal.templateIDsByPath = global.templateIDsByPath || defaultTemplateIDs\n\n// Get template for given path\nconst getComponentForPath = path => {\n  path = cleanPath(path)\n  return global.componentsByTemplateID[global.templateIDsByPath[path]]\n}\n\nglobal.reactStaticGetComponentForPath = getComponentForPath\nglobal.reactStaticRegisterTemplateIDForPath = (path, id) => {\n  global.templateIDsByPath[path] = id\n}\nglobal.clearTemplateIDs = () => {\n  global.templateIDsByPath = defaultTemplateIDs\n}\n\nexport default class Routes extends Component {\n  componentDidMount () {\n    global.clearTemplateIDs = () => {\n      this.setState({})\n    }\n  }\n  render () {\n    const { component: Comp, render, children } = this.props\n\n    const getFullComponentForPath = path => {\n      let Comp = getComponentForPath(path)\n      let is404 = path === '404'\n      if (!Comp) {\n        is404 = true\n        Comp = getComponentForPath('/404')\n      }\n      return newProps => (\n        Comp\n          ? <Comp {...newProps} {...(is404 ? {path: '404'} : {})} />\n          : null\n      )\n    }\n\n    const renderProps = {\n      componentsByTemplateID: global.componentsByTemplateID,\n      templateIDsByPath: global.templateIDsByPath,\n      getComponentForPath: getFullComponentForPath\n    }\n\n    if (Comp) {\n      return (\n        <Comp\n          {...renderProps}\n        />\n      )\n    }\n\n    if (render || children) {\n      return (render || children)(renderProps)\n    }\n\n    // This is the default auto-routing renderer\n    return (\n      <Route path='*' render={props => {\n        let Comp = getFullComponentForPath(props.location.pathname)\n        // If Comp is used as a component here, it triggers React to re-mount the entire\n        // component tree underneath during reconciliation, losing all internal state.\n        // By unwrapping it here we keep the real, static component exposed directly to React.\n        return Comp && Comp({ ...props, key: props.location.pathname })\n      }} />\n    )\n  }\n}\n\n`\n\n  const dynamicRoutesPath = path.join(config.paths.DIST, 'react-static-routes.js')\n  await fs.remove(dynamicRoutesPath)\n  await fs.outputFile(dynamicRoutesPath, file)\n}\n"]}