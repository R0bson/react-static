{"version":3,"sources":["../../src/static/index.js"],"names":["buildXMLandRSS","defaultOutputFileRate","Bar","len","label","Progress","total","extractTemplates","templates","config","routes","forEach","route","component","index","indexOf","push","templateID","length","prepareRoutes","opts","cb","d","console","log","process","env","REACT_STATIC_ROUTES_PATH","path","join","paths","DIST","chalk","green","fetchSiteData","getSiteData","dev","siteData","exportSharedRouteData","sharedProps","sharedPropsArr","Array","from","jsonProgress","map","fs","outputFile","STATIC_DATA","cachedProp","hash","jsonString","tick","Number","outputFileRate","fetchRoutes","seenProps","Map","dataProgress","getData","allProps","Object","keys","k","prop","includes","get","JSON","stringify","set","shorthash","unique","localProps","sharedPropsHashes","value","key","cached","buildHTML","clientStats","Comp","require","glob","sync","resolve","default","DocumentTemplate","Document","DefaultDocument","htmlProgress","basePath","REACT_STATIC_STAGING","stagingBasePath","hrefReplace","RegExp","srcReplace","routePath","routeInfo","embeddedRouteInfo","InitialPropsContext","staticURL","props","children","Component","childContextTypes","PropTypes","object","string","renderMeta","chunkNames","head","clientScripts","clientStyleSheets","clientCss","FinalComp","redirect","chunkName","renderToStringAndExtract","appHtml","comp","scripts","stylesheets","css","helmet","Helmet","renderStatic","htmlProps","htmlAttributes","toComponent","bodyProps","bodyAttributes","base","link","meta","noscript","script","style","title","renderToHtml","message","DocumentHtml","__html","html","REACT_STATIC_DISABLE_ROUTE_PREFIXING","replace","REACT_STATIC_PUBLICPATH","htmlFilename","routeInfoFilename","Promise","all","outputJson","res","exportRoutes"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable import/no-dynamic-require, react/no-danger */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { renderToString, renderToStaticMarkup } from 'react-dom/server'\nimport fs from 'fs-extra'\nimport glob from 'glob'\nimport path from 'path'\nimport Helmet from 'react-helmet'\nimport shorthash from 'shorthash'\nimport { ReportChunks } from 'react-universal-component'\nimport Progress from 'progress'\nimport chalk from 'chalk'\nimport flushChunks from 'webpack-flush-chunks'\n\nimport { makeHtmlWithMeta } from './components/HtmlWithMeta'\nimport { makeHeadWithMeta } from './components/HeadWithMeta'\nimport { makeBodyWithMeta } from './components/BodyWithMeta'\n\nimport generateRoutes from './generateRoutes'\nimport getRoutes from './getRoutes'\nimport { DefaultDocument } from './RootComponents'\nimport buildXMLandRSS from './buildXML'\nimport { time, timeEnd } from '../utils'\nimport { poolAll } from '../utils/shared'\nimport Redirect from '../client/components/Redirect'\n\nexport { buildXMLandRSS }\n\nconst defaultOutputFileRate = 100\n\nconst Bar = (len, label) =>\n  new Progress(`=> ${label ? `${label} ` : ''}[:bar] :current/:total :percent :rate/s :etas `, {\n    total: len,\n  })\n\nexport const extractTemplates = config => {\n  // Dedupe all templates into an array\n  const templates = []\n\n  config.routes.forEach(route => {\n    if (!route.component) {\n      return\n    }\n    // Check if the template has already been added\n    const index = templates.indexOf(route.component)\n    if (index === -1) {\n      // If it's new, add it\n      templates.push(route.component)\n      // Assign the templateID\n      route.templateID = templates.length - 1\n    } else {\n      // Assign the existing templateID\n      route.templateID = index\n    }\n  })\n\n  return templates\n}\n\nexport const prepareRoutes = async ({ config, opts }, cb = d => d) => {\n  console.log('=> Building Routes...')\n  // set the static routes\n  process.env.REACT_STATIC_ROUTES_PATH = path.join(config.paths.DIST, 'react-static-routes.js')\n\n  time(chalk.green('=> [\\u2713] Routes Built'))\n  return getRoutes(\n    {\n      config,\n      opts,\n    },\n    async routes => {\n      config.routes = routes\n      config.templates = extractTemplates(config)\n      await generateRoutes({\n        config,\n      })\n      timeEnd(chalk.green('=> [\\u2713] Routes Built'))\n      return cb(config)\n    }\n  )\n}\n\nexport const fetchSiteData = async config => {\n  console.log('=> Fetching Site Data...')\n  time(chalk.green('=> [\\u2713] Site Data Downloaded'))\n  // Get the site data\n  const siteData = await config.getSiteData({ dev: false })\n  timeEnd(chalk.green('=> [\\u2713] Site Data Downloaded'))\n  return siteData\n}\n\nexport const exportSharedRouteData = async (config, sharedProps) => {\n  // Write all shared props to file\n  const sharedPropsArr = Array.from(sharedProps)\n\n  if (sharedPropsArr.length) {\n    console.log('=> Exporting Shared Route Data...')\n    const jsonProgress = Bar(sharedPropsArr.length)\n    time(chalk.green('=> [\\u2713] Shared Route Data Exported'))\n\n    await poolAll(\n      sharedPropsArr.map(cachedProp => async () => {\n        await fs.outputFile(\n          path.join(config.paths.STATIC_DATA, `${cachedProp[1].hash}.json`),\n          cachedProp[1].jsonString || '{}'\n        )\n        jsonProgress.tick()\n      }),\n      Number(config.outputFileRate) || defaultOutputFileRate\n    )\n    timeEnd(chalk.green('=> [\\u2713] Shared Route Data Exported'))\n  }\n}\n\nexport const fetchRoutes = async config => {\n  // Set up some scaffolding for automatic data splitting\n  const seenProps = new Map()\n  const sharedProps = new Map()\n\n  console.log('=> Fetching Route Data...')\n  const dataProgress = Bar(config.routes.length)\n  time(chalk.green('=> [\\u2713] Route Data Downloaded'))\n  await poolAll(\n    config.routes.map(route => async () => {\n      // Fetch allProps from each route\n      route.allProps = !!route.getData && (await route.getData({ route, dev: false }))\n      // Default allProps (must be an object)\n      if (!route.allProps) {\n        route.allProps = {}\n      }\n\n      // TODO: check if route.allProps is indeed an object\n\n      // Loop through the props to find shared props between routes\n      // TODO: expose knobs to tweak these settings, perform them manually,\n      // or simply just turn them off.\n      Object.keys(route.allProps)\n        .map(k => route.allProps[k])\n        .forEach(prop => {\n          // Don't split small strings\n          if (typeof prop === 'string' && prop.length < 100) {\n            return\n          }\n          // Don't split booleans or undefineds\n          if (['boolean', 'number', 'undefined'].includes(typeof prop)) {\n            return\n          }\n          // Should be an array or object at this point\n          // Have we seen this prop before?\n          if (seenProps.get(prop)) {\n            // Only cache each shared prop once\n            if (sharedProps.get(prop)) {\n              return\n            }\n            // Cache the prop\n            const jsonString = JSON.stringify(prop)\n            sharedProps.set(prop, {\n              jsonString,\n              hash: shorthash.unique(jsonString),\n            })\n          } else {\n            // Mark the prop as seen\n            seenProps.set(prop, true)\n          }\n        })\n      dataProgress.tick()\n    }),\n    Number(config.outputFileRate) || defaultOutputFileRate\n  )\n\n  timeEnd(chalk.green('=> [\\u2713] Route Data Downloaded'))\n\n  console.log('=> Exporting Route Data...')\n  time(chalk.green('=> [\\u2713] Route Data Exported'))\n  await poolAll(\n    config.routes.map(route => async () => {\n      // Loop through the props and build the prop maps\n      route.localProps = {}\n      route.sharedPropsHashes = {}\n      Object.keys(route.allProps).forEach(key => {\n        const value = route.allProps[key]\n        const cached = sharedProps.get(value)\n        if (cached) {\n          route.sharedPropsHashes[key] = cached.hash\n        } else {\n          route.localProps[key] = value\n        }\n      })\n    }),\n    Number(config.outputFileRate) || defaultOutputFileRate\n  )\n  timeEnd(chalk.green('=> [\\u2713] Route Data Exported'))\n\n  exportSharedRouteData(config, sharedProps)\n}\n\nconst buildHTML = async ({ config, siteData, clientStats }) => {\n  // Use the node version of the app created with webpack\n  const Comp = require(glob.sync(path.resolve(config.paths.DIST, 'static.*.js'))[0]).default\n\n  // Retrieve the document template\n  const DocumentTemplate = config.Document || DefaultDocument\n\n  console.log('=> Exporting HTML...')\n\n  const htmlProgress = Bar(config.routes.length)\n\n  time(chalk.green('=> [\\u2713] HTML Exported'))\n\n  const basePath =\n    process.env.REACT_STATIC_STAGING === 'true' ? config.stagingBasePath : config.basePath\n  const hrefReplace = new RegExp(\n    `(href=[\"'])\\\\/(${basePath ? `${basePath}\\\\/` : ''})?([^\\\\/])`,\n    'gm'\n  )\n  const srcReplace = new RegExp(`(src=[\"'])\\\\/(${basePath ? `${basePath}\\\\/` : ''})?([^\\\\/])`, 'gm')\n\n  await poolAll(\n    config.routes.map(route => async () => {\n      const {\n        sharedPropsHashes, templateID, localProps, allProps, path: routePath,\n      } = route\n\n      // This routeInfo will be saved to disk. It should only include the\n      // localProps and hashes to construct all of the props later.\n      const routeInfo = {\n        path: routePath,\n        templateID,\n        sharedPropsHashes,\n        localProps,\n      }\n\n      // This embeddedRouteInfo will be inlined into the HTML for this route.\n      // It should only include the full props, not the partials.\n      const embeddedRouteInfo = {\n        ...routeInfo,\n        localProps: null,\n        allProps,\n        siteData,\n      }\n\n      // Inject allProps into static build\n      class InitialPropsContext extends Component {\n        static childContextTypes = {\n          routeInfo: PropTypes.object,\n          staticURL: PropTypes.string,\n        }\n        getChildContext () {\n          return {\n            routeInfo: embeddedRouteInfo,\n            staticURL: route.path === '/' ? route.path : `/${route.path}`,\n          }\n        }\n        render () {\n          return this.props.children\n        }\n      }\n\n      // Make a place to collect chunks, meta info and head tags\n      const renderMeta = {}\n      const chunkNames = []\n      let head = {}\n      let clientScripts = []\n      let clientStyleSheets = []\n      let clientCss = {}\n\n      let FinalComp\n\n      if (route.redirect) {\n        FinalComp = () => <Redirect fromPath={route.path} to={route.redirect} />\n      } else {\n        FinalComp = props => (\n          <ReportChunks report={chunkName => chunkNames.push(chunkName)}>\n            <InitialPropsContext>\n              <Comp {...props} />\n            </InitialPropsContext>\n          </ReportChunks>\n        )\n      }\n\n      const renderToStringAndExtract = comp => {\n        // Rend the app to string!\n        const appHtml = renderToString(comp)\n        const { scripts, stylesheets, css } = flushChunks(clientStats, {\n          chunkNames,\n        })\n\n        clientScripts = scripts\n        clientStyleSheets = stylesheets\n        clientCss = css\n        // Extract head calls using Helmet synchronously right after renderToString\n        // to not introduce any race conditions in the meta data rendering\n        const helmet = Helmet.renderStatic()\n        head = {\n          htmlProps: helmet.htmlAttributes.toComponent(),\n          bodyProps: helmet.bodyAttributes.toComponent(),\n          base: helmet.base.toComponent(),\n          link: helmet.link.toComponent(),\n          meta: helmet.meta.toComponent(),\n          noscript: helmet.noscript.toComponent(),\n          script: helmet.script.toComponent(),\n          style: helmet.style.toComponent(),\n          title: helmet.title.toComponent(),\n        }\n\n        return appHtml\n      }\n\n      let appHtml\n\n      try {\n        // Allow extractions of meta via config.renderToString\n        appHtml = await config.renderToHtml(\n          renderToStringAndExtract,\n          FinalComp,\n          renderMeta,\n          clientStats\n        )\n      } catch (error) {\n        error.message = `Failed exporting HTML for URL ${route.path} (${route.component}): ${\n          error.message\n        }`\n        throw error\n      }\n\n      const DocumentHtml = renderToStaticMarkup(\n        <DocumentTemplate\n          Html={makeHtmlWithMeta({ head })}\n          Head={makeHeadWithMeta({\n            head,\n            route,\n            clientScripts,\n            config,\n            clientStyleSheets,\n            clientCss,\n          })}\n          Body={makeBodyWithMeta({\n            head,\n            route,\n            embeddedRouteInfo,\n            clientScripts,\n            config,\n          })}\n          siteData={siteData}\n          routeInfo={embeddedRouteInfo}\n          renderMeta={renderMeta}\n        >\n          <div id=\"root\" dangerouslySetInnerHTML={{ __html: appHtml }} />\n        </DocumentTemplate>\n      )\n\n      // Render the html for the page inside of the base document.\n      let html = `<!DOCTYPE html>${DocumentHtml}`\n\n      // If the siteRoot is set and we're not in staging, prefix all absolute URL's\n      // with the siteRoot\n      if (process.env.REACT_STATIC_DISABLE_ROUTE_PREFIXING !== 'true') {\n        html = html.replace(hrefReplace, `$1${process.env.REACT_STATIC_PUBLICPATH}$3`)\n      }\n\n      html = html.replace(srcReplace, `$1${process.env.REACT_STATIC_PUBLICPATH}$3`)\n\n      // If the route is a 404 page, write it directly to 404.html, instead of\n      // inside a directory.\n      const htmlFilename =\n        route.path === '404'\n          ? path.join(config.paths.DIST, '404.html')\n          : path.join(config.paths.DIST, route.path, 'index.html')\n\n      // Make the routeInfo sit right next to its companion html file\n      const routeInfoFilename = path.join(config.paths.DIST, route.path, 'routeInfo.json')\n\n      const res = await Promise.all([\n        fs.outputFile(htmlFilename, html),\n        !route.redirect ? fs.outputJson(routeInfoFilename, routeInfo) : Promise.resolve(),\n      ])\n      htmlProgress.tick()\n      return res\n    }),\n    Number(config.outputFileRate) || defaultOutputFileRate\n  )\n  timeEnd(chalk.green('=> [\\u2713] HTML Exported'))\n}\n\n// Exporting route HTML and JSON happens here. It's a big one.\nexport const exportRoutes = async ({ config, clientStats }) => {\n  // we modify config in fetchSiteData\n  const siteData = await fetchSiteData(config)\n  // we modify config in fetchRoutes\n  await fetchRoutes(config)\n\n  await buildHTML({\n    config,\n    siteData,\n    clientStats,\n  })\n}\n"]}