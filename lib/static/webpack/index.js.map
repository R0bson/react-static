{"version":3,"sources":["../../../src/static/webpack/index.js"],"names":["config","stage","webpackConfig","buildCompiler","devServer","devCompiler","intendedPort","port","process","env","PORT","Number","messagePort","chalk","red","green","host","HOST","devServerConfig","hot","disableHostCheck","contentBase","paths","PUBLIC","DIST","publicPath","historyApiFallback","compress","quiet","watchOptions","ignored","before","app","get","req","res","json","next","getSiteData","dev","siteData","status","reloadWebpackRoutes","routes","forEach","routePath","path","encodeURI","route","find","d","Error","getData","allProps","first","console","log","hooks","invalid","tap","name","file","replace","ROOT","done","messages","stats","toJson","isSuccessful","errors","length","warnings","onStart","message","yellow","WebpackDevServer","socket","listen","resolvedReloadRoutes","opts","map","cleanPath","emit","type","Promise","resolve","reject","err","startDevServer","run","stack","details","prodStats","nodeStats","checkBuildStats","stageStats","buildErrors","hasErrors","buildWarnings","hasWarnings","toString","context","performance","hash","timings","entrypoints","chunkOrigins","chunkModules","colors","bold","prodStatsJson","fs","outputFileSync","join","JSON","stringify","buildProductionBundles","reloadRoutes","require","default","isNode","defaultLoaders","webpack","transformers","Array","isArray","modifiedConfig","transformer"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable import/no-dynamic-require, react/no-danger, import/no-mutable-exports */\nimport webpack from 'webpack'\nimport path from 'path'\nimport formatWebpackMessages from 'react-dev-utils/formatWebpackMessages'\nimport chalk from 'chalk'\nimport WebpackDevServer from 'webpack-dev-server'\nimport io from 'socket.io'\nimport fs from 'fs-extra'\n// import errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware'\n//\nimport { getStagedRules } from './rules'\nimport { findAvailablePort, time, timeEnd } from '../../utils'\nimport { cleanPath } from '../../utils/shared'\nimport { prepareRoutes } from '../'\n\nlet resolvedReloadRoutes\nlet reloadWebpackRoutes\n\nlet devServer\n\nconst reloadRoutes = (...args) => {\n  if (!resolvedReloadRoutes) {\n    // Not ready yet, so just wait\n    return\n  }\n  resolvedReloadRoutes(...args)\n}\n\nexport { reloadRoutes }\n\n// Builds a compiler using a stage preset, then allows extension via\n// webpackConfigurator\nexport function webpackConfig ({ config, stage }) {\n  let webpackConfig\n  if (stage === 'dev') {\n    webpackConfig = require('./webpack.config.dev').default({ config })\n  } else if (stage === 'prod') {\n    webpackConfig = require('./webpack.config.prod').default({\n      config,\n    })\n  } else if (stage === 'node') {\n    webpackConfig = require('./webpack.config.prod').default({\n      config,\n      isNode: true,\n    })\n  } else {\n    throw new Error('A stage is required when building a compiler.')\n  }\n\n  const defaultLoaders = getStagedRules({ config, stage })\n\n  if (config.webpack) {\n    let transformers = config.webpack\n    if (!Array.isArray(config.webpack)) {\n      transformers = [config.webpack]\n    }\n\n    transformers.forEach(transformer => {\n      const modifiedConfig = transformer(webpackConfig, {\n        stage,\n        defaultLoaders,\n      })\n      if (modifiedConfig) {\n        webpackConfig = modifiedConfig\n      }\n    })\n  }\n  return webpackConfig\n}\n\nexport async function buildCompiler ({ config, stage }) {\n  return webpack(webpackConfig({ config, stage }))\n}\n\n// Starts the development server\nexport async function startDevServer ({ config }) {\n  if (devServer) {\n    return devServer\n  }\n\n  const devCompiler = await buildCompiler({ config, stage: 'dev' })\n\n  // Default to localhost:3000, or use a custom combo if defined in static.config.js\n  // or environment variables\n  const intendedPort = (config.devServer && config.devServer.port) || process.env.PORT || 3000\n  const port = await findAvailablePort(Number(intendedPort))\n  // Find an available port for messages, as long as it's not the devServer port\n  const messagePort = await findAvailablePort(4000, [port])\n  if (intendedPort !== port) {\n    time(\n      chalk.red(\n        `=> Warning! Port ${intendedPort} is not available. Using port ${chalk.green(\n          intendedPort\n        )} instead!`\n      )\n    )\n  }\n  const host = (config.devServer && config.devServer.host) || process.env.HOST || 'http://localhost'\n\n  const devServerConfig = {\n    hot: true,\n    disableHostCheck: true,\n    contentBase: [config.paths.PUBLIC, config.paths.DIST],\n    publicPath: '/',\n    historyApiFallback: true,\n    compress: false,\n    quiet: true,\n    ...config.devServer,\n    watchOptions: {\n      ignored: 'node_modules',\n      // ignored: new RegExp(`(node_modules|${config.paths.PAGES})`),\n      ...(config.devServer ? config.devServer.watchOptions || {} : {}),\n    },\n    before: app => {\n      // Serve the site data\n      app.get('/__react-static__/getMessagePort', async (req, res) => {\n        res.json({\n          port: messagePort,\n        })\n      })\n\n      app.get('/__react-static__/siteData', async (req, res, next) => {\n        try {\n          const siteData = await config.getSiteData({ dev: true })\n          res.json(siteData)\n        } catch (err) {\n          res.status(500)\n          res.json(err)\n          next(err)\n        }\n      })\n\n      // Since routes may change during dev, this function can rebuild all of the config\n      // routes. It also references the original config when possible, to make sure it\n      // uses any up to date getData callback generated from new or replacement routes.\n      reloadWebpackRoutes = () => {\n        // Serve each routes data\n        config.routes.forEach(({ path: routePath }) => {\n          app.get(\n            `/__react-static__/routeInfo/${encodeURI(routePath === '/' ? '' : routePath)}`,\n            async (req, res, next) => {\n              // Make sure we have the most up to date route from the config, not\n              // an out of dat object.\n              const route = config.routes.find(d => d.path === routePath)\n              try {\n                if (!route) {\n                  throw new Error('Route could not be found!')\n                }\n                const allProps = route.getData ? await route.getData({ dev: true }) : {}\n                res.json({\n                  ...route,\n                  allProps,\n                })\n              } catch (err) {\n                res.status(500)\n                next(err)\n              }\n            }\n          )\n        })\n      }\n\n      reloadWebpackRoutes()\n\n      if (config.devServer && config.devServer.before) {\n        config.devServer.before(app)\n      }\n    },\n    port,\n    host,\n  }\n\n  let first = true\n  console.log('=> Building App Bundle...')\n  time(chalk.green('=> [\\u2713] Build Complete'))\n\n  devCompiler.hooks.invalid.tap(\n    {\n      name: 'React-Static',\n    },\n    file => {\n      console.log('=> File changed:', file.replace(config.paths.ROOT, ''))\n      console.log('=> Updating build...')\n      time(chalk.green('=> [\\u2713] Build Updated'))\n    }\n  )\n\n  devCompiler.hooks.done.tap(\n    {\n      name: 'React-Static',\n    },\n    stats => {\n      const messages = formatWebpackMessages(stats.toJson({}, true))\n      const isSuccessful = !messages.errors.length && !messages.warnings.length\n\n      if (isSuccessful) {\n        if (first) {\n          timeEnd(chalk.green('=> [\\u2713] Build Complete'))\n          console.log(chalk.green('=> [\\u2713] App serving at'), `${host}:${port}`)\n        } else {\n          timeEnd(chalk.green('=> [\\u2713] Build Updated'))\n        }\n        if (first && config.onStart) {\n          config.onStart({ devServerConfig })\n        }\n      }\n\n      first = false\n\n      if (messages.errors.length) {\n        console.log(chalk.red('Failed to build! Fix any errors and try again!'))\n        messages.errors.forEach(message => {\n          console.log(message)\n          console.log()\n        })\n      }\n\n      if (messages.warnings.length) {\n        console.log(chalk.yellow('Build complete with warnings.'))\n        console.log()\n        messages.warnings.forEach(message => {\n          console.log(message)\n          console.log()\n        })\n      }\n    }\n  )\n\n  // Start the webpack dev server\n  devServer = new WebpackDevServer(devCompiler, devServerConfig)\n\n  // Start the messages socket\n  const socket = io()\n  socket.listen(messagePort)\n\n  resolvedReloadRoutes = async paths => {\n    await prepareRoutes({ config, opts: { dev: true } }, async config => {\n      if (!paths) {\n        paths = config.routes.map(route => route.path)\n      }\n      paths = paths.map(cleanPath)\n      reloadWebpackRoutes()\n      socket.emit('message', { type: 'reloadRoutes', paths })\n    })\n  }\n\n  await new Promise((resolve, reject) => {\n    devServer.listen(port, null, err => {\n      if (err) {\n        return reject(err)\n      }\n      resolve()\n    })\n  })\n\n  return devServer\n}\n\nexport async function buildProductionBundles ({ config }) {\n  return new Promise((resolve, reject) => {\n    webpack([\n      webpackConfig({ config, stage: 'prod' }),\n      webpackConfig({ config, stage: 'node' }),\n    ]).run((err, stats) => {\n      if (err) {\n        console.log(chalk.red(err.stack || err))\n        if (err.details) {\n          console.log(chalk.red(err.details))\n        }\n        return reject(err)\n      }\n\n      stats.toJson('verbose')\n\n      const [prodStats, nodeStats] = stats.stats\n\n      checkBuildStats('prod', prodStats)\n      checkBuildStats('node', nodeStats)\n\n      function checkBuildStats (stage, stageStats) {\n        const buildErrors = stageStats.hasErrors()\n        const buildWarnings = stageStats.hasWarnings()\n\n        if (buildErrors || buildWarnings) {\n          console.log(\n            stageStats.toString({\n              context: config.context,\n              performance: false,\n              hash: false,\n              timings: true,\n              entrypoints: false,\n              chunkOrigins: false,\n              chunkModules: false,\n              colors: true,\n            })\n          )\n          if (buildErrors) {\n            console.log(\n              chalk.red.bold(`\n                => There were ERRORS during the ${stage} build stage! :(\n                => Fix them and try again!\n              `)\n            )\n          } else if (buildWarnings) {\n            console.log(\n              chalk.yellow(`\n=> There were WARNINGS during the ${stage} build stage. Your site will still function, but you may achieve better performance by addressing the warnings above.\n`)\n            )\n          }\n        }\n      }\n\n      const prodStatsJson = prodStats.toJson()\n\n      fs.outputFileSync(\n        path.join(config.paths.DIST, 'client-stats.json'),\n        JSON.stringify(prodStatsJson, null, 2)\n      )\n\n      fs.outputFileSync(\n        path.join(config.paths.DIST, 'bundle-environment.json'),\n        JSON.stringify(process.env, null, 2)\n      )\n\n      resolve(prodStatsJson)\n    })\n  })\n}\n"]}